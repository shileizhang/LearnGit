git init

<在Git仓库里对一个文件进行时光穿梭>

//add 与 rm比较
git add XXX.txt(可反复多次使用，添加多个文件)（向版本库添加）
	实际上就是把文件修改添加到暂存区	
git rm XXX.txt用于删除文件（从版本库删除）
 ！版本库中删除文件和工作区中删除文件的不同
	手动删除文件时的git status 是changes not stage for commit，需要git rm XXX.txt将其变为changes to be commit 状态
	同样可以直接使用git rm 直接删除工作区文件并且git status是changes to be commit状态
	
git commit -m "提交的描述信息"（每次提交都是一个版本有commit id号对应）
	实际上就是把暂存区的所有内容提交到当前分支
	git commit只负责把暂存区的修改提交
	commit之后暂存区就没有任何内容了

git status可以让我们时刻掌握仓库当前的状态
git diff查看差异

git log查看历史纪录
	git log --pretty=oneline一行显示简略信息
git reflog用来记录你的每一次命令(所有的记录命令)

//！！两者的差异（reset回退版本 checkout撤销修改）
git reset --hard HEAD^（时间线上的穿梭）
	HEAD表示当前版本指针，HEAD^表示上一个，HEAD^^上两个版本
	HEAD~100表示上第100个版本
git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
！！git checkout HEAD~1 --xx.txt 文件回退到上一个版本的内容
！版本库中文件删除之后 git checkout使用会报错，因为版本库中已经没有了该文件
！git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”

<远程仓库>
//添加远程库（本地库与远程库建立联系）
 git remote add origin git@github.com:shileizhang/LearnGit.git 
	远程库的名字就是origin  实际库名为LearnGit
	
//分支推送和拉取命令
git push命令，把本地库的内容推送到远程，实际上是把当前分支推送到远程分支。
	git push -u origin master
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
	Git不但会把本地的master分支内容推送的远程新的master分支，
	还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
	
	！！git push <远程主机名> <本地分支名>:<远程分支名>
	
	说明：git push origin master :如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，
	如果该远程分支不存在，则会被新建。
	git push origin :master :如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，
	这条命令是删除远程分支
	
git pull(相当于是从远程获取最新版本并merge到本地)
git pull <远程主机> <远程分支>:<本地分支>
	如果省略本地分支，则将自动合并到当前所在分支上
git fetch
	
<分支merge>
分支的含义和使用

创建并切换分支
git checkout -b dev     (创建并切换到dev分支)
==git branch dev
  git checkout dev  
  
git branch(查看当前分支) git branch命令会列出所有分支，当前分支前面会标一个*号

git merge 命令用于合并指定分支到当前分支
	本地合并分支

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

分支合并是如果两个分支都对某个文件同一位置做了修改就会产生冲突
	需要手动修改冲突之后再merge，最后删除子分支
	
多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，
后push的童鞋不得不先pull，在本地合并，然后才能push成功

rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比

标签管理
	tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起
	
    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    命令git tag可以查看所有标签。
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
	

